name: Release
 
on:
  workflow_dispatch:
    inputs:
      notes:
        description: "Release Notes"
        required: true
        type: string

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v6
        with:
          node-version: 24

      - name: "Clean build"
        run: |
          npm install
          rm -rf ./scripts/*
          tsc

      - name: "Install requirements"
        run: |
          sudo apt install -y jq zip git

      - name: "Get version number"
        id: "get_version"
        run: |
          version_from_module=$(jq -r .version module.json)
          version_from_package=$(jq -r .version package.json)

          if [ $version_from_module != $version_from_package ]; then
            echo "Version mismatch"
            exit 1
          fi

          echo "TAG_VERSION=${version_from_module}" >> "$GITHUB_OUTPUT"

      - name: "Adjust module.json"
        env:
          TAG_VERSION: "${{ steps.get_version.outputs.TAG_VERSION }}"
        run: |
          download="https://github.com/dotadd/pf2e-aeon-stone-tinkering/releases/download/${TAG_VERSION}/pf2e-aeon-stone-tinkering.zip"
          manifest="https://github.com/dotadd/pf2e-aeon-stone-tinkering/releases/download/${TAG_VERSION}/module.json"
          tmp=$(mktemp)
          jq --arg d "$download" --arg m "$manifest" '.download = $d | .manifest = $m' module.json > "$tmp" && mv "$tmp" module.json

      - name: "Pack release"
        run: |
          zip -r pf2e-aeon-stone-tinkering.zip \
              module.json \
              package.json \
              README.md \
              LICENSE.md \
              scripts/ \
              packs/

      - name: "Delete tag if exists"
        env:
          GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          TAG_VERSION: "${{ steps.get_version.outputs.TAG_VERSION }}"
        run: |
          release=$(gh release view ${TAG_VERSION} || echo "RELEASE NOT FOUND")

          if [ "${release}" != "RELEASE NOT FOUND" ]; then
            gh release delete ${TAG_VERSION} --cleanup-tag -y
            exit 0
          fi

          # account for tag without release
          tags=$(git tag -l)
          for t in ${tags}; do
              if [ ${t} = ${TAG_VERSION} ]; then
                  git push --delete origin ${TAG_VERSION}
              fi
          done

      - name: "Push tag"
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          tag_prefix: ""
          custom_tag: "${{ steps.get_version.outputs.TAG_VERSION }}"

      - name: "Create release"
        uses: softprops/action-gh-release@v2
        with:
          body: "${{ inputs.notes }}"
          tag_name: "${{ steps.get_version.outputs.TAG_VERSION }}"
          files: |
            module.json
            pf2e-aeon-stone-tinkering.zip
          make_latest: true
          fail_on_unmatched_files: true

      - name: "Publish to FoundryVTT"
        env:
          FVTTTOKEN: "${{ secrets.FVTT_RELEASE_TOKEN }}"
          TAG_VERSION: "${{ steps.get_version.outputs.TAG_VERSION }}"
        run: |
          manifest=$(jq .manifest module.json)
          compat_min=$(jq .compatibility.minimum module.json)
          compat_ver=$(jq .compatibility.verified module.json)

          cat << EOF > post_data.json
          {
              "id":"pf2e-aeon-stone-tinkering",
              "release": {
                  "version": "${TAG_VERSION}",
                  "manifest": ${manifest},
                  "notes": "https://github.com/dotadd/pf2e-aeon-stone-tinkering/releases/tag/${TAG_VERSION}",
                  "compatibility": {
                  "minimum": ${compat_min},
                  "verified": ${compat_ver}
                  }
              }
          }
          EOF

          curl \
            -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: ${FVTTTOKEN}" \
            -d @post_data.json \
            https://foundryvtt.com/_api/packages/release_version/
